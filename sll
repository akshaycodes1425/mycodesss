#include <stdio.h>
#include <stdlib.h>

// Define a structure for a node
struct Node {
    int data;
    struct Node *next;
};

// Function to insert a new node at the beginning of the linked list
void insertAtBeginning(struct Node **head, int newData) {
    // Allocate memory for new node
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    // Assign data to the new node
    newNode->data = newData;

    // Make next of new node as head
    newNode->next = *head;

    // Move the head to point to the new node
    *head = newNode;

    printf("%d inserted at the beginning\n", newData);
}

// Function to insert a new node after a given node
void insertAfter(struct Node *prevNode, int newData) {
    if (prevNode == NULL) {
        printf("Previous node cannot be NULL\n");
        return;
    }

    // Allocate memory for new node
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    // Assign data to the new node
    newNode->data = newData;

    // Make next of new node as next of prevNode
    newNode->next = prevNode->next;

    // Link the next of prevNode to the new node
    prevNode->next = newNode;

    printf("%d inserted after %d\n", newData, prevNode->data);
}

// Function to insert a new node at the end of the linked list
void insertAtEnd(struct Node **head, int newData) {
    // Allocate memory for new node
    struct Node *newNode = (struct Node *)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed\n");
        return;
    }

    // Assign data to the new node
    newNode->data = newData;
    newNode->next = NULL;

    // If the linked list is empty, make the new node as head
    if (*head == NULL) {
        *head = newNode;
        printf("%d inserted as the first node\n", newData);
        return;
    }

    // Traverse to the last node
    struct Node *last = *head;
    while (last->next != NULL) {
        last = last->next;
    }

    // Change the next of the last node
    last->next = newNode;

    printf("%d inserted at the end\n", newData);
}

// Function to delete a node with given key from the linked list
void deleteNode(struct Node **head, int key) {
    // Store head node
    struct Node *temp = *head;
    struct Node *prev = NULL;

    // If head node itself holds the key to be deleted
    if (temp != NULL && temp->data == key) {
        *head = temp->next;  // Change head
        free(temp);          // Free old head
        printf("%d deleted from the list\n", key);
        return;
    }

    // Search for the key to be deleted, keep track of the previous node
    while (temp != NULL && temp->data != key) {
        prev = temp;
        temp = temp->next;
    }

    // If key was not present in the linked list
    if (temp == NULL) {
        printf("%d not found in the list\n", key);
        return;
    }

    // Unlink the node from the linked list
    prev->next = temp->next;

    // Free the memory
    free(temp);

    printf("%d deleted from the list\n", key);
}

// Function to search for a node with given data in the linked list
void searchNode(struct Node *head, int searchData) {
    struct Node *temp = head;
    while (temp != NULL) {
        if (temp->data == searchData) {
            printf("%d found in the list\n", searchData);
            return;
        }
        temp = temp->next;
    }
    printf("%d not found in the list\n", searchData);
}

// Function to display the linked list
void displayList(struct Node *head) {
    struct Node *temp = head;
    if (temp == NULL) {
        printf("Linked list is empty\n");
        return;
    }
    printf("Linked list elements: ");
    while (temp != NULL) {
        printf("%d ", temp->data);
        temp = temp->next;
    }
    printf("\n");
}

// Main function to demonstrate linked list operations
int main() {
    struct Node *head = NULL;

    // Insert nodes into the linked list
    insertAtEnd(&head, 10);
    insertAtBeginning(&head, 5);
    insertAtEnd(&head, 20);
    insertAfter(head->next, 15);

    // Display the linked list
    displayList(head);

    // Search for a node
    searchNode(head, 20);

    // Delete nodes from the linked list
    deleteNode(&head, 5);
    deleteNode(&head, 15);

    // Display the updated linked list
    displayList(head);

    return 0;
}
